// <auto-generated />
using System;
using FamilyTreeApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FamilyTreeApi.Migrations
{
    [DbContext(typeof(FamilyTreeContext))]
    [Migration("20200616165644_InitialTables_2")]
    partial class InitialTables_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FamilyTreeApi.DTOs.AddNewsCommentDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<int>("NewsId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AddNewsCommentDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.AddNewsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComment");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Description");

                    b.Property<bool>("IsAccepted");

                    b.Property<string>("NewsPlace");

                    b.Property<int>("NewsTypeId");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AddNewsDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.BlodCommentsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ByUser");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Image");

                    b.HasKey("Id");

                    b.ToTable("BlodCommentsDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.BlogDetailsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComment");

                    b.Property<string>("ByUser");

                    b.Property<int>("CommentCount");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BlogDetailsDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.BlogsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowComment");

                    b.Property<string>("ByUser");

                    b.Property<int>("CommentCount");

                    b.Property<DateTime?>("CreatedDateH");

                    b.Property<DateTime?>("CreatedDateM");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool>("IsAccepted");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BlogsDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.BlogsDetailsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComment");

                    b.Property<string>("ByUser");

                    b.Property<int>("CommentCount");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BlogsDetailsDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.BlogsUserDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentCount");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BlogsUserDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.FamilyCharUpdateDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("FamilyCharUpdateDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.FamilyCharacterDetailsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDateH");

                    b.Property<DateTime?>("BirthDateM");

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("Image");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("FamilyCharacterDetailsDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.FamilyCharactersAdminDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime?>("BirthDateH");

                    b.Property<DateTime?>("BirthDateM");

                    b.Property<string>("CharName");

                    b.Property<DateTime?>("CreatedDateH");

                    b.Property<DateTime?>("CreatedDateM");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<bool?>("IsAccepted");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("FamilyCharactersAdminDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.FamilyCharactersDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("Image");

                    b.HasKey("Id");

                    b.ToTable("FamilyCharactersDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.FamilyDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FamilyName");

                    b.HasKey("Id");

                    b.ToTable("FamilyDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.FamilyTreeDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName");

                    b.Property<string>("ParenName");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("FamilyTreeDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.FilterUserPermissionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SearchBy");

                    b.Property<string>("SearckKey");

                    b.HasKey("Id");

                    b.ToTable("FilterUserPermissionDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.GetUsersDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddDateM");

                    b.Property<DateTime?>("BirthDateM");

                    b.Property<string>("FullName");

                    b.HasKey("Id");

                    b.ToTable("GetUsersDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.MyBlogDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComment");

                    b.Property<int>("CommentCount");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MyBlogDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.NewsCommentDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ByUser");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("UserImage");

                    b.HasKey("Id");

                    b.ToTable("NewsCommentDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.NewsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ByUser");

                    b.Property<int>("CommentCount");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Desctiption");

                    b.Property<string>("NewsImage");

                    b.Property<string>("NewsType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("NewsDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.NewsDetailsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ByUser");

                    b.Property<int>("CommentCount");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Desctiption");

                    b.Property<string>("NewsType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("NewsDetailsDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.NewsEditDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComment");

                    b.Property<string>("Description");

                    b.Property<bool>("IsAccepted");

                    b.Property<int>("NewsTypeId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("NewsEditDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.NewsImagesDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NewsImage");

                    b.HasKey("Id");

                    b.ToTable("NewsImagesDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.NewsImagesEditDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsMain");

                    b.Property<int>("NewsId");

                    b.HasKey("Id");

                    b.ToTable("NewsImagesEditDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.NewsListDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowAddNews");

                    b.Property<bool>("AllowComment");

                    b.Property<string>("ByUser");

                    b.Property<int>("CommentCount");

                    b.Property<DateTime>("CreatedDateH");

                    b.Property<DateTime>("CreatedDateM");

                    b.Property<string>("Desctiption");

                    b.Property<string>("Image");

                    b.Property<bool>("IsAccepted");

                    b.Property<string>("NewsType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("NewsListDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.NewsTypeDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName");

                    b.HasKey("Id");

                    b.ToTable("NewsTypeDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.ReturnDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("TestDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UserDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("UserDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UserFilterDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDateH");

                    b.Property<DateTime?>("BirthDateM");

                    b.Property<string>("FullName");

                    b.Property<string>("Image");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("UserFilterDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UserIdentityDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptedAdd");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("UserIdentityDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UserPermissionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDateH");

                    b.Property<DateTime?>("BirthDateM");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsAddBlogs");

                    b.Property<bool>("IsAddChild");

                    b.Property<bool>("IsAddFamilyChar");

                    b.Property<bool>("IsAddNews");

                    b.Property<string>("UserImage");

                    b.HasKey("Id");

                    b.ToTable("UserPermissionDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UserPermissionUpdateDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAddBlogs");

                    b.Property<bool>("IsAddChild");

                    b.Property<bool>("IsAddFamilyChar");

                    b.Property<bool>("IsAddNews");

                    b.HasKey("Id");

                    b.ToTable("UserPermissionUpdateDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UserRelationDTO", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("Image");

                    b.HasKey("Id");

                    b.ToTable("UserRelationDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UserReturnDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptedAdd");

                    b.Property<string>("Address");

                    b.Property<DateTime?>("BirthDateH");

                    b.Property<DateTime?>("BirthDateM");

                    b.Property<string>("Email");

                    b.Property<string>("FaceBookAcc");

                    b.Property<string>("FullName");

                    b.Property<string>("Gender");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("Image");

                    b.Property<string>("JobTitle");

                    b.Property<int?>("ParentId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("TwitterAcc");

                    b.Property<string>("UserName");

                    b.Property<string>("WorkAddress");

                    b.HasKey("Id");

                    b.ToTable("UserReturnDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UserToReturnDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<bool?>("AllowAddChildren");

                    b.Property<bool?>("AllowAddFamilyChar");

                    b.Property<bool?>("AllowBlog");

                    b.Property<bool?>("AllowNews");

                    b.Property<DateTime?>("BirthDateH");

                    b.Property<DateTime?>("BirthDateM");

                    b.Property<string>("Email");

                    b.Property<string>("FaceBookAcc");

                    b.Property<string>("FullName");

                    b.Property<int?>("GenderId");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("Image");

                    b.Property<string>("JobTitle");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("TwitterAcc");

                    b.Property<string>("UserName");

                    b.Property<string>("WorkAddress");

                    b.HasKey("Id");

                    b.ToTable("UserToReturnDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.UtilitiesDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BlogsCount");

                    b.HasKey("Id");

                    b.ToTable("UtilitiesDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.DTOs.WifeDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<string>("WifeName");

                    b.HasKey("Id");

                    b.ToTable("WifeDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.Data.BlogMDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ByUser");

                    b.Property<int>("CommentCount");

                    b.Property<DateTime?>("CreatedDateH");

                    b.Property<DateTime?>("CreatedDateM");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("BlogMDTO");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComment");

                    b.Property<DateTime>("CreatedDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateM")
                        .HasColumnType("date");

                    b.Property<string>("Description");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Title");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateM")
                        .HasColumnType("date");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComment");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.DefinitionLineage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TreeDefinition");

                    b.HasKey("Id");

                    b.ToTable("DefinitionLineage");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FamilyName");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Symbole");

                    b.HasKey("Id");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.FamilyCharacters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharId");

                    b.Property<DateTime>("CreatedDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateM")
                        .HasColumnType("date");

                    b.Property<string>("Description");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Title");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CharId")
                        .IsUnique()
                        .HasFilter("[CharId] IS NOT NULL");

                    b.ToTable("FamilyCharacters");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderName");

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowComment");

                    b.Property<DateTime>("CreatedDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateM")
                        .HasColumnType("date");

                    b.Property<string>("Desctiption");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("NewsPlace");

                    b.Property<int>("NewsTypeId");

                    b.Property<string>("Title");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NewsTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateM")
                        .HasColumnType("date");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("NewsId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsComment");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.NewsImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateM")
                        .HasColumnType("date");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsMain");

                    b.Property<int>("NewsId");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsImage");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.NewsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("NewsType1");

                    b.HasKey("Id");

                    b.ToTable("NewsType");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("AddDateM")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("NotificationTypeId");

                    b.Property<string>("NotifyName");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateM")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("NotifyType");

                    b.HasKey("Id");

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppLogo");

                    b.Property<string>("AppName");

                    b.Property<string>("CPanelLogo");

                    b.Property<string>("LoginLogo");

                    b.Property<string>("MailAddress");

                    b.Property<string>("MailPassword");

                    b.Property<string>("MailServer");

                    b.Property<int>("MailServerPort");

                    b.Property<string>("MailUserName");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("StatusName");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Terms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Termss");

                    b.HasKey("Id");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptedAdd");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<bool>("AllowAddChildren");

                    b.Property<bool>("AllowAddFamilyChar");

                    b.Property<bool>("AllowBlog");

                    b.Property<bool>("AllowNews");

                    b.Property<DateTime?>("BirthDateH")
                        .HasColumnType("date");

                    b.Property<DateTime?>("BirthDateM")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDateH")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateM")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FaceBookAcc");

                    b.Property<int>("FamilyId");

                    b.Property<string>("FullName");

                    b.Property<int?>("GenderId");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("JobTitle");

                    b.Property<string>("Lat");

                    b.Property<string>("Lng");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("MotherId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int?>("ParentId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("StatusId");

                    b.Property<string>("TwitterAcc");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserTypeId");

                    b.Property<string>("WorkAddress");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NotificationId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("UType");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Wife", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("UserId");

                    b.Property<string>("WName");

                    b.HasKey("Id");

                    b.ToTable("Wife");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Blog", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.User", "User")
                        .WithMany("Blog")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.BlogComment", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.Blog", "Blog")
                        .WithMany("BlogComment")
                        .HasForeignKey("BlogId");

                    b.HasOne("FamilyTreeApi.Models.User", "User")
                        .WithMany("BlogComment")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.FamilyCharacters", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.User", "UserChar")
                        .WithOne("FamilyCharactersUser")
                        .HasForeignKey("FamilyTreeApi.Models.FamilyCharacters", "CharId");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.News", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.NewsType", "NewsType")
                        .WithMany("News")
                        .HasForeignKey("NewsTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FamilyTreeApi.Models.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FamilyTreeApi.Models.NewsComment", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.News", "News")
                        .WithMany("NewsComment")
                        .HasForeignKey("NewsId");

                    b.HasOne("FamilyTreeApi.Models.User", "User")
                        .WithMany("NewsComment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.NewsImage", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.News", "News")
                        .WithMany("NewsImage")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.Notification", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.NotificationType", "NotificationType")
                        .WithMany("Notification")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.RoleClaim", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.User", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("FamilyTreeApi.Models.User", "Parent")
                        .WithMany("UserChild")
                        .HasForeignKey("ParentId");

                    b.HasOne("FamilyTreeApi.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("FamilyTreeApi.Models.UserType", "UserType")
                        .WithMany("User")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserClaim", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserLogin", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserNotification", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.Notification", "Notification")
                        .WithMany("UserNotification")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FamilyTreeApi.Models.User", "User")
                        .WithMany("UserNotification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserRole", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FamilyTreeApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FamilyTreeApi.Models.UserToken", b =>
                {
                    b.HasOne("FamilyTreeApi.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
